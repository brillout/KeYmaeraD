goran frehse phaver stt08
-for composition semantics

fix bug that hp* != hp+

look up
-bestiarium
-ansgar fehnker, hsccc04

-non lin solution
-merge with main branch

-also usefull in sense that formula modelisation easier then automata modelisation?

-contact
 -austria guy
 -nick
 -goran fresh
 -phou

-every formula -> spaceex
-* assignments

-examples
 -keymaera
 -niko
 -literature
  -spaceex examples
-speeder
 -linear diff eqS?
-more powerfull
 -linearize
  -ask goran non linear
  -not a priority since spaceex will eventually linearize?
 -other forumla forms -- when keymaeraD transforms the forumla + multiple hybrid systems interacting
  -on automata level
  -on hybrid program level
  -on run level


-possible optimasation
 -insert loop for composition at end states instead of start state
 -unfold *
 -flat composition instead of hiearchical composition

-catch non linearity
-nice-ize code

-ask david if he could check the scala code style
 -locations.foreach(l => l.autom = this) kinda ugly
 -get rid of the two warnings
 -NoClassDefFoundError
 -test1.dl not parsing
 -how is Automaton#Location called and what diff exactly w Location
 -assert instead of exception in patern matching? -- afaik assert for internal error, exception for usage error
 -declare but define later

---parallel
-how powerfull/weak is the translation

---eventually
-make more powerfull
 -e.g. indepedent hybrid systems -> several indepedent spaceex runs
-simulate * assignement by not setting flow in spaceex xml input
-sanetize varS && quantifier -- make sure every var has unique name and eliminate forall quantifiers

---done
-spaceex unexpected output
-unbounded sets error
-prob: start loc shouldn't be an end state but seems to be
-alternative for isendstate:  forbidden+= "& loc(endstate)"
-set forbidden state space: negate good state space
-set init and end states
-graph output
-branch of main impl
-make bouncing ball work
-adapt transition guards to spaceex
-adapt location invariants to spaceex
-spaceex doesn't cope multiple tags
-add examples
 -id edges and id locations
 -disjunktion in guard&invariant
 -every hybrid program operator
 -reursive and & or
 -x != 0 in spaceex not working



=== examples
-simple.dl -- works
-simpler.dl -- works
-test1_[.]*.dl -- works
-bouncingball.dl -- works
-water_tank.dl -- works
-creation.dl -- too weak: distributed
-arith-safety-lemma.dl -- too weak: non linear
-ETCS-essentials.dl -- too weak: non linear
-distributed-car-essentials(0?).dl: too weak: non linear
-headache.dl -- too weak: non linear
-llcsimple[.]*.dl -- too weak: distributed
-locallanecontrol.dl -- too weak: distributed
-one_lane_simple(0?).dl -- too weak: non linear
-QdlSimpleDiff.dl -- too weak: distributed
-safety-lemma.dl -- too weak: non linear
-sarah.dl -- too weak: non linear
-switchstab-param.dl -- too weak: non linear
-test.dl -- too weak: distributed
-to_prove_one_bf.dl -- too weak: non linear
-TRM-essentials.dl -- too weak: * assignement & non linear
-tylenol.dl -- too weak: distributed


=== SpaceEx notes
-composition: a jump in one base automaton requires a jump in all other automata
-multiple same tag: SpaceEx will only consider last tag and ignore the others
-for <assignment>: use := instead of ==   +  x' means derivate not post value
-if no controlled attributed defined then implicitly set as true
-<flow>x' = 1</flow> != <flow> x' == 1</flow>
-<flow>x' == - 1</flow> != <flow>x' == -1</flow> -- use the latter one
