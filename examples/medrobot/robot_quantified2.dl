// this is robot_quantified.dl
// a theorem about the safety of the control algorithm that enforces
// multiple virtual fixtures in 2D, with force feedback

{
 /*  position of tip */
 qx : () -> Real,
 qy : () -> Real,
// qz : () -> Real,

 K : () -> Real,

 // force input. piecewise linear, according to fxp, fyp
 fx : () -> Real,
 fy : () -> Real,
// fz : () -> Real,


 // the actual inputs. derivative of force input.
 fxp : () -> Real,
 fyp : () -> Real,
// fzp : () -> Real,

 // time length of a step
 e : () -> Real,

 // stopwatch that enforces e
 t : () -> Real,

 // dampening factor, between 0 and 1
 g : () -> Real,

 // perpendicular distance from tool tip to a barrier
 // at beginning of step.
 d0 : (B) -> Real,

 // thickness of slow zone (constant)
 dd : () -> Real,

 // predicted perpendicular distance from tool tip to barrier,
 // at end of step, if g = 0
 dist : (B) -> Real,

 // discriminant
 disc : (B) -> Real,

 // extremeal point
 xtr : (B) -> Real,

 // attenuation computed for force feedback
 u : (B) -> Real,

 // normal (wrt barrier) component of (fxp, fyp, fzp)
 fnp : (B) -> Real,
 // normal (wrt barrier) component of (fx, fy, fz)
 fn : (B) -> Real,

 // An arbitrary point on the boundary line.
 px : (B) -> Real,
 py : (B) -> Real,

 // Unit normal for boundary line.
 nx : (B) -> Real,
 ny : (B) -> Real,

 // a particular boundary
 i : () -> B,
 j : () -> B,

 tmp : () -> Real,
 tmp2 : () -> Real,
 tmp3 : () -> Real,

 first : () -> B,
 last : () -> B,
 next : (B) -> B
}

K() > 0, 
e() > 0, 
dd() > 0,
(forall i : B. nx(i)^2 + ny(i)^2 = 1),

// Start on the correct side of boundary line.
[j() := first(); {?j()/=last(); j() := next(j())}*]((qx() - px(j())) * nx(j()) + (qy() - py(j())) * ny(j()) >= 0)

|-

[{
  fxp := *;
  fyp := *;

  i() := first();

  {?(i /= last()); 
     xtr(i) := *; u(i) := 1;
     d0(i) := (qx() - px(i)) * nx(i) + (qy() - py(i)) * ny(i);

     fnp(i) := fxp() * nx(i) + fyp() * ny(i);
     fn(i) := fx() * nx(i) + fy() * ny(i);

     // force feedback
     ((?(d0(i) >= dd());
               u(i) := 1) ++ // none
      (?((0 <= d0(i)) & (d0(i) <= dd())); // maybe slow depending on direction
               ((? fnp(i) >= 0 & fn(i) >= 0);
                          u(i) := 1)++
               ((? fnp(i) >  0 & fn(i) <= 0 & (xtr(i) * fnp(i) = -1*fn(i)) & (xtr <= (1/2) * e));
                          u(i) := 1)++
               ((? fnp(i) >  0 & fn(i) <= 0 & (xtr(i) * fnp(i) = -1*fn(i)) & (xtr >= (1/2) * e()));
                          u(i) := *; (?u(i) * dd() = d0(i)) )++
               ((? fnp(i)  = 0 & fn(i) <= 0 );                      
                          u(i) := *; (?u(i) * dd() = d0(i)) )++
               ((? fnp(i) <  0 & fn(i) >= 0 & (xtr(i) * fnp(i) = -1*fn(i)) & (xtr <= (1/2) * e()));  
                          u(i) := *; (?u(i) * dd() = d0(i)) )++
               ((? fnp(i) <  0 & fn(i) >= 0 & (xtr(i) * fnp(i) = -1*fn(i)) & (xtr >= (1/2) * e()));  
                          u(i) := 1)++
               ((? fnp(i)  = 0 & fn(i) >= 0 );                      
                          u(i) := 1)++
               ((? fnp(i) <= 0 & fn(i) <= 0);
                          u := *; (? u(i) * dd() = d0(i)) )) ++
      (?((d0(i) <= 0));
  	        u(i) := 0)); // stuck

      dist(i) := (d0(i) + K() * u(i) * (fn(i) * e() + fnp(i) * e()^2 * (1/2)));
      disc(i) := (( K() * u(i) * fn(i))^2 - 2 * K() * u(i) * fnp(i) * d0(i));

      ((? (fnp(i) <= 0 & dist(i) >= 0);
               g := u) ++
      (?(fnp(i) <= 0 & dist(i) <= 0);
               tmp := *; (? tmp() * K() * (fn(i)*e() + (1/2) * fnp(i)* (e()^2)) = 1);
               g := (-1) * d0(i) * tmp()) ++ 
      ((? fnp(i) >= 0 & fn(i) <= 0 & disc(i) <= 0);
               g := u) ++
      ((? fnp(i) >= 0 & fn(i) <= 0 & disc(i) >= 0 & fn(i) + fnp(i) * e() >= 0);
               tmp := *; (? tmp() * K() * (fn(i)^2) = 1);
               g := 2 * fnp(i) * d0(i) * tmp()) ++
      ((? fnp(i) >= 0 & fn(i) <= 0 & disc(i) >= 0 & fn(i) + fnp(i) * e() <= 0 & dist(i) <= 0);
               tmp() := *; (? tmp() * K() * (fn(i)*e() + (1/2) * fnp(i)* (e()^2)) = 1);
               g := (-1) * d0(i) * tmp()) ++
      ((? fnp(i) >= 0 & fn(i) <= 0 & disc(i) >= 0 & fn(i) + fnp(i) * e() <= 0 & dist(i) >= 0);
               g := u) ++
      ((? fnp(i) >= 0 & fn(i) >= 0);
               g := u));
      i := next(i)}*;
  (? i=last());
  t() := 0;
  {  qx' = K() * fx() * g(), 
     qy' = K() * fy() * g(),
     fx' = fxp(),
     fy' = fyp(),
     t' = 1;
     t() <= e()}
     @solution(forall s. qx(s) = qx() + K() * fx() * g() * s() + (1/2) * K() * fxp() * g() * s^2,
               forall s. qy(s) = qy() + K() * fy() * g() * s() + (1/2) * K() * fyp() * g() * s^2,
               forall s. fx(s) = fx() + fxp() * s,
               forall s. fy(s) = fy() + fyp() * s,
               forall s. t(s) = t() + s)
}*]
[j() := first(); {?j()/=last(); j() := next(j())}*]((qx() - px(j())) * nx(j()) + (qy() - py(j())) * ny(j()) >= 0)

